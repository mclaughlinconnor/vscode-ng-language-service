{
  "name": "pug-ng-template",
  "displayName": "Pug Angular Language Service",
  "description": "Editor services for Angular templates written in Pug",
  "version": "18.2.0",
  "publisher": "mclaughlinconnor",
  "icon": "angular.png",
  "license": "MIT",
  "keywords": [
    "Angular",
    "multi-root ready"
  ],
  "engines": {
    "vscode": "^1.74.3"
  },
  "capabilities": {
    "untrustedWorkspaces": {
      "supported": true
    },
    "virtualWorkspaces": {
      "supported": "limited",
      "description": "The Language Server Protocol does not support remote file systems. Functionality is limited to syntax highlighting only."
    }
  },
  "categories": [
    "Programming Languages"
  ],
  "contributes": {
    "commands": [
      {
        "command": "angular.restartNgServer",
        "title": "Restart Angular Language server",
        "category": "Angular"
      },
      {
        "command": "angular.openLogFile",
        "title": "Open Angular Server log",
        "category": "Angular"
      },
      {
        "command": "angular.getTemplateTcb",
        "title": "View Template Typecheck Block",
        "category": "Angular"
      },
      {
        "command": "angular.goToComponentWithTemplateFile",
        "title": "Go to component",
        "category": "Angular"
      },
      {
        "command": "angular.goToTemplateForComponent",
        "title": "Go to template",
        "category": "Angular"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "angular.goToComponentWithTemplateFile",
          "when": "editorLangId == html && !virtualWorkspace"
        },
        {
          "command": "angular.goToTemplateForComponent",
          "when": "editorLangId == typescript && !virtualWorkspace"
        },
        {
          "command": "angular.getTemplateTcb",
          "when": "!virtualWorkspace"
        }
      ],
      "editor/context": [
        {
          "when": "(resourceLangId == html || resourceLangId == typescript) && !virtualWorkspace",
          "command": "angular.getTemplateTcb",
          "group": "angular"
        },
        {
          "when": "resourceLangId == html && !virtualWorkspace",
          "command": "angular.goToComponentWithTemplateFile",
          "group": "angular"
        },
        {
          "when": "resourceLangId == typescript && !virtualWorkspace",
          "command": "angular.goToTemplateForComponent",
          "group": "angular"
        }
      ]
    },
    "configuration": {
      "title": "Angular Language Service",
      "properties": {
        "angular.log": {
          "type": "string",
          "enum": [
            "off",
            "terse",
            "normal",
            "verbose"
          ],
          "default": "off",
          "description": "Enables logging of the Angular server to a file. This log can be used to diagnose Angular Server issues. The log may contain file paths, source code, and other potentially sensitive information from your project."
        },
        "angular.view-engine": {
          "type": "boolean",
          "default": false,
          "description": "Use legacy View Engine language service. This option is incompatible with projects using Angular v13 and above."
        },
        "angular.enable-strict-mode-prompt": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Prompt to enable the [strictTemplates](https://angular.io/guide/angular-compiler-options#stricttemplates) flag in [angularCompilerOptions](https://angular.io/guide/angular-compiler-options). Note that strict mode is only available when using Ivy."
        },
        "angular.trace.server": {
          "type": "string",
          "scope": "window",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the Angular language server."
        },
        "angular.suggest.includeAutomaticOptionalChainCompletions": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable showing completions on potentially undefined values that insert an optional chain call. Requires TS 3.7+ and strict null checks to be enabled."
        },
        "angular.suggest.includeCompletionsWithSnippetText": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Enable snippet completions from Angular language server. Requires using TypeScript 4.3+ in the workspace."
        },
        "angular.forceStrictTemplates": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Enabling this option will force the language service to use [strictTemplates](https://angular.io/guide/angular-compiler-options#stricttemplates) and ignore the user settings in the `tsconfig.json`."
        }
      }
    },
    "grammars": [
      {
        "path": "./syntaxes/inline-template.json",
        "scopeName": "inline-template.ng",
        "injectTo": [
          "source.ts"
        ],
        "embeddedLanguages": {
          "text.html.derivative": "html",
          "source.css": "css",
          "source.js": "javascript"
        }
      },
      {
        "path": "./syntaxes/inline-styles.json",
        "scopeName": "inline-styles.ng",
        "injectTo": [
          "source.ts"
        ],
        "embeddedLanguages": {
          "source.css.scss": "scss"
        }
      },
      {
        "path": "./syntaxes/template.json",
        "scopeName": "template.ng",
        "injectTo": [
          "text.html.derivative",
          "source.ts"
        ],
        "embeddedLanguages": {
          "text.html": "html",
          "source.css": "css",
          "expression.ng": "javascript"
        }
      },
      {
        "path": "./syntaxes/template-blocks.json",
        "scopeName": "template.blocks.ng",
        "injectTo": [
          "text.html.derivative",
          "source.ts"
        ],
        "embeddedLanguages": {
          "text.html": "html",
          "control.block.expression.ng": "javascript",
          "control.block.body.ng": "html"
        }
      },
      {
        "path": "./syntaxes/let-declaration.json",
        "scopeName": "template.let.ng",
        "injectTo": [
          "text.html.derivative",
          "source.ts"
        ]
      },
      {
        "path": "./syntaxes/template-tag.json",
        "scopeName": "template.tag.ng",
        "injectTo": [
          "text.html.derivative",
          "source.ts"
        ]
      },
      {
        "path": "./syntaxes/expression.json",
        "scopeName": "expression.ng"
      }
    ]
  },
  "activationEvents": [
    "onLanguage:html",
    "onLanguage:jade",
    "onLanguage:typescript"
  ],
  "main": "./bazel-bin/client/src/extension",
  "scripts": {
    "ng-dev": "cross-env TS_NODE_PROJECT=$PWD/.ng-dev/tsconfig.json TS_NODE_TRANSPILE_ONLY=1 node --no-warnings --loader ts-node/esm node_modules/@angular/dev-infra-private/ng-dev/bundles/cli.mjs",
    "compile": "tsc -b && yarn bazel build :npm",
    "compile:client-server": "yarn bazel build //client:index.js //server:index.js",
    "compile:test": "tsc -b test.tsconfig.json",
    "compile:integration": "tsc -b integration && yarn --cwd integration/project build",
    "compile:syntaxes-test": "tsc -b syntaxes/test",
    "build:syntaxes": "tsc -b syntaxes && node dist/syntaxes/build.js",
    "format": "scripts/format.sh",
    "watch": "yarn ibazel build //client:index.js //server:index.js",
    "package": "scripts/build.sh package.json",
    "test": "yarn bazel test --test_tag_filters=unit_test //...",
    "test:watch": "yarn ibazel test --test_tag_filters=unit_test //...",
    "test:lsp": "yarn bazel test --test_output=streamed //integration/lsp:test",
    "test:e2e": "yarn bazel test --test_output=streamed //integration/e2e:test",
    "test:inspect-client": "yarn bazel run --config=debug //client/src/tests:test",
    "test:inspect-common": "yarn bazel run --config=debug //common/tests:test",
    "test:inspect-server": "yarn bazel run --config=debug //server/src/tests:test",
    "test:inspect-syntaxes": "yarn bazel run --config=debug //syntaxes/test:test",
    "test:legacy-inspect": "yarn compile:test && node --inspect-brk node_modules/jasmine/bin/jasmine.js --config=jasmine.json",
    "test:legacy": "yarn compile:test && jasmine --config=jasmine.json",
    "test:legacy-lsp": "yarn compile:integration && jasmine --config=integration/lsp/jasmine.json",
    "test:legacy-e2e": "yarn compile:integration && node dist/integration/e2e",
    "test:legacy-syntaxes": "yarn compile:syntaxes-test && yarn build:syntaxes && jasmine dist/syntaxes/test/driver.js"
  },
  "dependencies": {
    "@electron/node-gyp": "10.2.0-electron.1",
    "@electron/rebuild": "^3.3.0",
    "fs-extra": "^10.0.0",
    "gauge": "4.0.4",
    "jsonfile": "^6.0.1",
    "node-gyp": "9.4.0",
    "npmlog": "^6.0.0",
    "npx": "10.2.2",
    "pug-lexer": "^5.0.1",
    "pug-parser": "^6.0.0",
    "pug_html_locator_js": "1.0.48",
    "pugjs-angular-language-service": "18.2.5-b",
    "typescript": "5.4.5",
    "universalify": "^2.0.0",
    "vscode-html-languageservice": "^4.2.5",
    "vscode-jsonrpc": "6.0.0",
    "vscode-languageclient": "7.0.0",
    "vscode-languageserver": "7.0.0",
    "vscode-languageserver-textdocument": "^1.0.7",
    "vscode-uri": "3.0.7"
  },
  "devDependencies": {
    "@angular/core": "^18.1.0-rc.0",
    "@angular/dev-infra-private": "https://github.com/angular/dev-infra-private-builds.git#262cb3bb487e8dddb3c404f4f2c8b34a9a1f14c2",
    "@bazel/bazelisk": "1.18.0",
    "@bazel/ibazel": "0.16.2",
    "@types/jasmine": "3.10.7",
    "@types/node": "18.19.39",
    "@types/vscode": "1.67.0",
    "clang-format": "1.8.0",
    "cross-env": "^7.0.3",
    "esbuild": "0.14.39",
    "jasmine": "3.99.0",
    "prettier": "2.7.1",
    "rxjs": "6.6.7",
    "ts-node": "^10.8.1",
    "tslint": "6.1.3",
    "tslint-eslint-rules": "5.4.0",
    "vsce": "1.100.1",
    "vscode-languageserver-protocol": "3.16.0",
    "vscode-languageserver-types": "3.16.0",
    "vscode-test": "1.6.1",
    "vscode-tmgrammar-test": "0.0.11"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/angular/vscode-ng-language-service"
  },
  "resolutions": {
    "@angular/compiler-cli": "npm:pugjs-angular-cli@18.2.5-a",
    "@electron/node-gyp": "10.2.0-electron.1",
    "cacache": "19.0.1",
    "fs-minipass": "3.0.3",
    "glob": "8.1.0",
    "make-fetch-happen": "14.0.3",
    "mimic-response": "3.1.0",
    "minimatch": "3.0.4",
    "minipass": "7.1.2",
    "minipass-collect": "2.0.1",
    "minipass-fetch": "4.0.1",
    "minipass-flush@^1.0.5": "patch:minipass-flush@npm%3A1.0.5#./.yarn/patches/minipass-flush-npm-1.0.5-efe79d9826.patch",
    "minipass-pipeline@^1.2.4": "patch:minipass-pipeline@npm%3A1.2.4#./.yarn/patches/minipass-pipeline-npm-1.2.4-5924cb077f.patch",
    "minipass-sized@^1.0.3": "patch:minipass-sized@npm%3A1.0.3#./.yarn/patches/minipass-sized-npm-1.0.3-306d86f432.patch",
    "minizlib": "3.0.2",
    "once": "1.4.0",
    "proc-log": "2.0.1",
    "retry": "0.13.1",
    "tar": "7.4.3",
    "unique-filename": "1.1.1",
    "unique-slug": "2.0.2"
  },
  "overrides": {
    "@angular/compiler-cli": "npm:pugjs-angular-cli@18.2.5-a",
    "@electron/node-gyp": "10.2.0-electron.1",
    "cacache": "19.0.1",
    "fs-minipass": "3.0.3",
    "glob": "8.1.0",
    "make-fetch-happen": "14.0.3",
    "mimic-response": "3.1.0",
    "minimatch": "3.0.4",
    "minipass": "7.1.2",
    "minipass-collect": "2.0.1",
    "minipass-fetch": "4.0.1",
    "minizlib": "3.0.2",
    "once": "1.4.0",
    "proc-log": "2.0.1",
    "retry": "0.13.1",
    "tar": "7.4.3",
    "unique-filename": "1.1.1",
    "unique-slug": "2.0.2"
  },
  "pnpm": {
    "patchedDependencies": {
      "minipass-flush@1.0.5": "patches/minipass-flush.patch",
      "minipass-pipeline@1.2.4": "patches/minipass-pipeline.patch",
      "minipass-sized@1.0.3": "patches/minipass-sized.patch"
    }
  }
}
